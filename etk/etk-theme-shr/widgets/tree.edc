/* ETK - The Enlightened ToolKit
 * Copyright (C) 2006-2008 Simon Treny, Hisham Mardam-Bey, Vincent Torri, Viktor Kojouharov
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library. 
 * If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * group "etk/tree"
 * ----------------
 * This group corresponds to the background object of the tree, which is below
 * the headers-bar and the scrolled-view. Most of the time, it is only used to
 * defined the values of the different settings
 *
 * Different settings:
 * -------------------
 * - "tree_contains_headers": a boolean setting whether the headers-bar should
 *      be contained by the tree itself (the headers-bar is then above the
 *      scrolled-view) or contained by the scrolled-view (the headers-bar is then
 *      inside the scrolled-view). The default value is "1": the headers-bar is
 *      contained directly by the tree. Set it to "0" otherwise
 * - "separator_color": the rgba color of the vertical lines separating the
 *      columns of the tree. Default value is "255 255 255 0"
 *
 * Signals:
 * --------
 * - common widget's signals: "etk,state,enter", "etk,state,leave",
 *      "etk,state,focused", "etk,state,unfocused", "etk,state,shown"
 */
group {
   name: "etk/tree";
   data {
      item: "tree_contains_headers" "1";
      item: "separator_color" "204 204 204 140";
   }
}


/**
 * group "etk/tree/header"
 *       "etk/tree/header_unique"
 *       "etk/tree/header_first"
 *       "etk/tree/header_last"
 * -----------------------
 * These groups correspond to the header-objects of the tree's columns.
 * - Only "etk/tree/header" has to be necessarily implemented. It is the generic
 *      group for the column headers.
 * - "etk/tree/header_first" is used for the header of the first visible column,
 *      when several columns can be seen. If this group doesn't exist,
 *      "etk/tree/header" is used
 * - "etk/tree/header_last" is used for the header of the last visible column,
 *      when several columns can be seen. If this group doesn't exist,
 *      "etk/tree/header" is used
 * - "etk/tree/header_last" is used for the header of the column when only one
 *      column is visible seen. If this group doesn't exist, "etk/tree/header"
 *      is used
 *
 * Signals:
 * --------
 * - "etk,state,pressed": emitted when the header is pressed
 * - "etk,state,released": emitted when the header is released
 * - "etk,state,clicked": emitted when the header is clicked
 * - common widget's signals: "etk,state,enter", "etk,state,leave", "etk,state,shown"
 */
TREE_HEADER("etk/tree/header", "tree_header_middle.png", "tree_header_middle2.png");
TREE_HEADER("etk/tree/header_unique", "tree_header_unique.png", "tree_header_unique2.png");
TREE_HEADER("etk/tree/header_first", "tree_header_first.png", "tree_header_first2.png");
TREE_HEADER("etk/tree/header_last", "tree_header_last.png", "tree_header_last2.png");


/**
 * group "etk/tree/scrolled_view"
 * -----------------------
 * This group corresponds to the scrolled-view of the tree. The scrolled-view
 * contains the tree-grid (see group "etk/tree/grid") which contains the rows
 * of the tree. It may also contain the headers if the setting
 * "tree_contains_headers" of the "etk,tree" group is set to "0"
 *
 * Signals:
 * --------
 * - common widget's signals: "etk,state,enter", "etk,state,leave",
 *      "etk,state,focused", "etk,state,unfocused", "etk,state,shown"
 */
group {
   name: "etk/tree/scrolled_view";
   parts {
/*
      part {
         name: "background";
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.0;
               offset: 0 0;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -1 -1;
            }
            image {
               normal: "tree.png";
               border: 8 8 8 8;
            }
            fill {
               smooth: 0;
            }
         }
      }
*/
      part {
         name: "etk.swallow.content";
         type: SWALLOW;
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.0;
               offset: 1 2;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -3 -5;
            }
         }
      }
      part {
         name: "shadow";
         mouse_events: 0;
         description {
            state: "default" 0.0;
            color: 255 255 255 120;
            rel1 {
               relative: 0.0 0.0;
               offset: 1 0;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -1 -1;
            }
            image {
               normal: "tree_shadow.png";
               border: 12 12 12 12;
               middle: 0;
            }
            fill {
               smooth: 0;
            }
         }
      }
      /* TODO: it doesn't look good... */
      //FOCUS_GLOW(0.0, 0.0, -1, 0, "background", 1.0, 1.0, 0, -1, "background")
   }
   /*programs {
      program {
         name: "tree_focus";
         signal: "etk,state,focused";
         source: "etk";
         FOCUS_GLOW_ACTION
      }
      program {
         name: "tree_unfocus";
         signal: "etk,state,unfocused";
         source: "etk";
         UNFOCUS_GLOW_ACTION
      }
   }*/
}


/**
 * group "etk/tree/scrolled_view/hscrollbar"
 * -----------------------
 * This group corresponds to the horizontal scrollbar of the tree's
 * scrolled-view
 *
 * Special parts:
 * --------------
 * - "etk.dragable.bar": the dragable part used to scroll the content of the
 *      scrolled-view
 *
 * Signals:
 * --------
 * - common widget's signals: "etk,state,enter", "etk,state,leave", "etk,state,shown"
 *
 * Signals to emit:
 * ----------------
 * - "scroll_left_start": should be emitted when the content should be
 *      scrolled to the left (i.e. when the left arrow is pressed)
 * - "scroll_right_start": should be emitted when the content should be
 *      scrolled to the right (i.e. when the right arrow is pressed)
 * - "scroll_stop": should be emitted when the content should stop being
 *      scrolled (i.e. when the pressed arrow is released)
 */
group {
   name: "etk/tree/scrolled_view/hscrollbar";
   min: 68 18;
   parts {
      part {
         name: "clip";
         type: RECT;
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.0;
               offset: 0 0;
               to: "trough";
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -1 -1;
               to: "trough";
            }
         }
      }
      part {
         name: "trough";
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.0 0.5;
               offset: 0 -9;
            }
            rel2 {
               relative: 1.0 0.5;
               offset: -1 8;
            }
            image {
               normal: "hscrollbar_trough.png";
               border: 8 8 8 8;
            }
         }
      }
      part {
         name: "trough_bar";
         description {
            state: "default" 0.0;
            rel1 {
               relative: 1.0 0.5;
               offset: 1 -1;
               to_x: "left_arrow";
               to_y: "trough";
            }
            rel2 {
               relative: 0.0 0.5;
               offset: -2 0;
               to_x: "right_arrow";
               to_y: "trough";
            }
            image {
               normal: "hscrollbar_trough2.png";
               border: 4 4 0 0;
            }
         }
      }
      part {
         name: "confine";
         type: RECT;
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.0 0.5;
               offset: -1 7;
               to_x: "trough_bar";
            }
            rel2 {
               relative: 1.0 0.5;
               offset: 0 7;
               to_x: "trough_bar";
            }
         }
      }
      SCROLLBAR_DRAG("etk.dragable.bar", 20, 16, 1, 0, "scrollbar_hdrag1.png", "scrollbar_hdrag2.png", "scrollbar_hdrag_thumb.png", "clip")
      SCROLLBAR_BUTTON("left_arrow", 0.0, 0.5, 0, -8, "scrollbar_button_left1.png", "scrollbar_button_left2.png", "clip")
      SCROLLBAR_BUTTON("right_arrow", 1.0, 0.5, -17, -8, "scrollbar_button_right1.png", "scrollbar_button_right2.png", "clip")
   }
   programs {
      SCROLLBAR_DRAG_PROG("etk.dragable.bar")
      SCROLLBAR_BUTTON_PROG("left_arrow", "left")
      SCROLLBAR_BUTTON_PROG("right_arrow", "right")
   }
}

/**
 * group "etk/tree/scrolled_view/vscrollbar"
 * -----------------------
 * This group corresponds to the vertical scrollbar of the tree's
 * scrolled-view
 *
 * Special parts:
 * --------------
 * - "etk.dragable.bar": the dragable part used to scroll the content of the
 *      scrolled-view
 *
 * Signals:
 * --------
 * - common widget's signals: "etk,state,enter", "etk,state,leave", "etk,state,shown"
 *
 * Signals to emit:
 * ----------------
 * - "scroll_up_start": should be emitted when the content should be
 *      scrolled up (i.e. when the up arrow is pressed)
 * - "scroll_down_start": should be emitted when the content should be
 *      scrolled down (i.e. when the down arrow is pressed)
 * - "scroll_stop": should be emitted when the content should stop being
 *      scrolled (i.e. when the pressed arrow is released)
 */
group {
   name: "etk/tree/scrolled_view/vscrollbar";
   min: 18 68;
   parts {
      part {
         name: "clip";
         type: RECT;
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.0;
               offset: 0 0;
               to: "trough";
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -1 -1;
               to: "trough";
            }
         }
      }
      part {
         name: "trough";
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.5 0.0;
               offset: -9 0;
            }
            rel2 {
               relative: 0.5 1.0;
               offset: 8 -1;
            }
            image {
               normal: "vscrollbar_trough.png";
               border: 8 8 8 8;
            }
         }
      }
      part {
         name: "trough_bar";
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.5 1.0;
               offset: -1 1;
               to_x: "trough";
               to_y: "up_arrow";
            }
            rel2 {
               relative: 0.5 0.0;
               offset: 0 -2;
               to_x: "trough";
               to_y: "down_arrow";
            }
            image {
               normal: "vscrollbar_trough2.png";
               border: 0 0 4 4;
            }
         }
      }
      part {
         name: "confine";
         type: RECT;
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.5 0.0;
               offset: 7 -1;
               to_y: "trough_bar";
            }
            rel2 {
               relative: 0.5 1.0;
               offset: 7 0;
               to_y: "trough_bar";
            }
         }
      }
      SCROLLBAR_DRAG("etk.dragable.bar", 16, 20, 0, 1, "scrollbar_vdrag1.png", "scrollbar_vdrag2.png", "scrollbar_vdrag_thumb.png", "clip")
      SCROLLBAR_BUTTON("up_arrow", 0.5, 0.0, -8, 0, "scrollbar_button_up1.png", "scrollbar_button_up2.png", "clip")
      SCROLLBAR_BUTTON("down_arrow", 0.5, 1.0, -8, -17, "scrollbar_button_down1.png", "scrollbar_button_down2.png", "clip")
   }
   programs {
      SCROLLBAR_DRAG_PROG("etk.dragable.bar")
      SCROLLBAR_BUTTON_PROG("up_arrow", "up")
      SCROLLBAR_BUTTON_PROG("down_arrow", "down")
   }
}

/**
 * group "etk/tree/row"
 * -----------------------
 * This group is used by all the visible rows of the tree
 *
 * Signals:
 * --------
 * - "etk,state,odd": emitted when the group corresponds to a row whose number
 *      is odd
 * - "etk,state,even": emitted when the group corresponds to a row whose number
 *      is even
 * - "etk,state,selected": emitted when the row is selected
 * - "etk,state,unselected":  emitted when the row is unselected
 *
 * Note that this group doesn't have the common signals of a widget
 * ("etk,state,enter", "etk,state,leave", ...) since a row is not a widget.
 * You can though use the signals "mouse,in", "mouse,out", "mouse,down,1" (...)
 * emitted automatically by Edje
 */
group {
   name: "etk/tree/row";
   parts {
      part {
         name: "row";
         type: RECT;
         description {
            state: "default" 0.0;
            color: 240 240 240 255;
         }
         description {
            state: "even" 0.0;
            inherit: "default" 0.0;
            color: 220 220 220 255;
         }
      }
      part {
         name: "select_rect1";
         type: RECT;
         mouse_events: 0;
         description {
            state: "default" 0.0;
            color: 248 169 0 255;
            visible: 0;
            rel1 {
               relative: 0.0 0.0;
               offset: 0 0;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -1 0;
            }
         }
         description {
            state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
      part {
         name: "select_rect2";
         type: RECT;
         mouse_events: 0;
         description {
            state: "default" 0.0;
            color: 248 169 0 255;
            visible: 0;
            rel1 {
               relative: 0.0 0.0;
               offset: 1 1;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -2 -1;
            }
         }
         description {
            state: "selected" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         name: "row_even";
         signal: "etk,state,even";
         source: "etk";
         action: STATE_SET "even" 0.0;
         target: "row";
      }
      program {
         name: "row_odd";
         signal: "etk,state,odd";
         source: "etk";
         action: STATE_SET "default" 0.0;
         target: "row";
      }
      program {
         name: "row_select";
         signal: "etk,state,selected";
         source: "etk";
         action: STATE_SET "selected" 0.0;
         target: "select_rect1";
         target: "select_rect2";
      }
      program {
         name: "row_unselect";
         signal: "etk,state,unselected";
         source: "etk";
         action: STATE_SET "default" 0.0;
         target: "select_rect1";
         target: "select_rect2";
      }
   }
}

/**
 * group "etk/tree/expander"
 * -----------------------
 * This group corresponds to the expander object used to fold/unfold rows.
 *
 * Signals:
 * --------
 * - "etk,action,fold": emitted when the corresponding row is folded
 * - "etk,action,unfold": emitted when the corresponding row is unfolded
 *
 * The min size of the group is used to determine the size of the expander in the tree
 *
 * Note that this group doesn't have the common signals of a widget
 * ("etk,state,enter", "etk,state,leave", ...) since a tree's expander is not a widget.
 * You can though use the signals "mouse,in", "mouse,out", "mouse,down,1" (...)
 * emitted automatically by Edje
 */
group {
   name: "etk/tree/expander";
   min: 18 18;
   parts {
      part {
         name: "expander_arrow";
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.0;
               offset: 0 0;
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -1 -1;
            }
            image {
               normal: "tree_expander_fold.png";
            }
            fill {
               smooth: 0;
            }
         }
         description {
            state: "expanded" 0.0;
            inherit: "default" 0.0;
            image {
               normal: "tree_expander_unfold.png";
            }
            fill {
               smooth: 0;
            }
         }
      }
   }
   programs {
      program {
         name: "expander_fold";
         signal: "etk,action,fold";
         source: "etk";
         action: STATE_SET "default" 0.0;
         target: "expander_arrow";
      }
      program {
         name: "expander_unfold";
         signal: "etk,action,unfold";
         source: "etk";
         action: STATE_SET "expanded" 0.0;
         target: "expander_arrow";
      }
   }
}

/**
 * group "etk/tree/checkbox"
 * -----------------------
 * This group corresponds to the checkbox used by the "checkbox" model of the tree
 *
 * Signals:
 * --------
 * - "etk,state,on": emitted when the checkbox is checked
 * - "etk,action,off": emitted when the checkbox is unchecked
 *
 * The min size of the group is used to determine the size of the checkbox in the tree
 *
 * Note that this group doesn't have the common signals of a widget
 * ("etk,state,enter", "etk,state,leave", ...) since a tree's checkbox is not a widget.
 * You can though use the signals "mouse,in", "mouse,out", "mouse,down,1" (...)
 * emitted automatically by Edje
 */
group {
   name: "etk/tree/checkbox";
   min: 20 20;
   parts {
      part {
         name: "checkbox";
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.5;
               offset: 2 -8;
            }
            rel2 {
               relative: 0.0 0.5;
               offset: 17 7;
            }
            image {
               normal: "checkbox_off.png";
            }
            fill {
               smooth: 0;
            }
         }
         description {
            state: "on" 0.0;
            inherit: "default" 0.0;
            image {
               normal: "checkbox_on.png";
            }
         }
      }
      part {
         name: "checkbox_down";
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.0 0.5;
               offset: 2 -8;
            }
            rel2 {
               relative: 0.0 0.5;
               offset: 17 7;
            }
            image {
               normal: "checkbox_down.png";
            }
            fill {
               smooth: 0;
            }
         }
         description {
            state: "down" 0.0;
            inherit: "default" 0.0;
            visible: 1;
         }
      }
   }
   programs {
      program {
         name: "tree_checkbox_activate";
         signal: "etk,state,on";
         source: "etk";
         action: STATE_SET "on" 0.0;
         target: "checkbox";
      }
      program {
         name: "tree_checkbox_desactivate";
         signal: "etk,state,off";
         source: "etk";
         action: STATE_SET "default" 0.0;
         target: "checkbox";
      }
      program {
         name: "tree_checkbox_down";
         signal: "mouse,down,1*";
         source: "checkbox";
         action: STATE_SET "down" 0.0;
         target: "checkbox_down";
      }
      program {
         name: "tree_checkbox_up";
         signal: "mouse,up,1";
         source: "checkbox";
         action: STATE_SET "default" 0.0;
         target: "checkbox_down";
      }
   }
}

/**
 * group "etk/tree/text"
 * -----------------------
 * This group corresponds to the text of the rows of the tree
 *
 */
group {
   name: "etk/tree/text";
   parts {
      part {
         name: "etk.text.label";
         type: TEXTBLOCK;
         description {
            state: "default" 0.0;
            align: 0.0 0.5;
            text {
               style: "Label";
               min: 1 1;
            }
         }
      }
   }
}


group {
   name: "etk/tree/progress_bar";
   min: 120 18;
   data {      
      item: "filler_pulse_width" "0.3";
   }
   parts {
      part {
         name: "progress_bar";
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.5;
               offset: 0 -9;
            }
            rel2 {
               relative: 1.0 0.5;
               offset: -1 8;
            }
            image {
               normal: "entry.png";
               border: 8 8 8 8;
            }
            fill {
               smooth: 0;
            }
         }
      }
      part {
         name: "clip";
         type: RECT;
         description {
            state: "default" 0.0;
            rel1 {
               relative: 0.0 0.5;
               offset: 0 -9;
            }
            rel2 {
               relative: 1.0 0.5;
               offset: -1 8;
            }
         }
      }
      part {
         name: "confine";
         type: RECT;
         description {
            state: "default" 0.0;
            visible: 0;
            rel1 {
               relative: 0.0 0.0;
               offset: 2 0;
               to: "progress_bar";
            }
            rel2 {
               relative: 1.0 1.0;
               offset: -3 0;
               to: "progress_bar";
            }
         }
      }
      part { 
         name: "etk.dragable.filler";
         mouse_events: 0;
         dragable { 
            confine: "confine"; 
            x: 1 1 1; 
            y: 0 0 0;
         } 
         description { 
            state: "default" 0.0; 
            min: 0 14;
            fixed: 1 1; 
            rel1 { 
               relative: 0.5 0.5; 
               offset: 0 0; 
               to: "progress_bar"; 
            } 
            rel2 { 
               relative: 0.5 0.5; 
               offset: 0 0; 
               to: "progress_bar"; 
            }
            image { 
               normal: "scrollbar_hdrag1.png";
               border: 5 5 5 5; 
            } 
            fill { 
               smooth: 0; 
            } 
	      } 
      }
      part {
         name: "etk.text.text";
         type: TEXT;
         clip_to: "clip";
         mouse_events: 0;
         description {
            state: "default" 0.0;
            color: 0 0 0 255;
            rel1 {
               relative: 0.0 0.0;
               offset: 4 3;
               to: "progress_bar";
	         }
            rel2 {
               relative: 1.0 1.0;
               offset: -5 -3;
               to: "progress_bar";
            }
            text {
               text: "Text";
               font: "Vera";
               size:  10;
               align: 0.5 0.5;
            }
         }
      }
	}
}
/* TODO: document "etk/tree/grid" */
